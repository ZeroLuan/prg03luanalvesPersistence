/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.curso.view;

import br.com.ifba.curso.controller.CursoIController;
import br.com.ifba.curso.entity.Curso;
import jakarta.annotation.PostConstruct;
import java.awt.HeadlessException;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author Luan Alves
 */

@Component
public final class CursoListar extends javax.swing.JFrame {
    
    @Autowired
    private CursoIController cursoController;
    
    /**
     * Creates new form CursoListar
     */
    public CursoListar() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    @PostConstruct
    public void init() {
        carregarTabela();
    }
    
    public void carregarTabela() {
 
        try {
            List<Curso> cursos = cursoController.findAll();
            
            System.out.println("Cursos encontrados: " + cursos.size()); 

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            for (Curso curso : cursos) {
                Object[] linha = {
                    curso.getId(),
                    curso.getNome(),
                    curso.getCodigoCurso(),
                    curso.isAtivo()
                };
                model.addRow(linha);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar cursos: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonAtualizarCurso = new javax.swing.JToggleButton();
        buttonDeletarCurso = new javax.swing.JToggleButton();
        buttonCriarNovoCurso = new javax.swing.JToggleButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Codigo-Curso", "Ativo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        buttonAtualizarCurso.setText("Atualizar Curso");
        buttonAtualizarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAtualizarCursoActionPerformed(evt);
            }
        });

        buttonDeletarCurso.setText("Deletar Curso");
        buttonDeletarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeletarCursoActionPerformed(evt);
            }
        });

        buttonCriarNovoCurso.setText("Criar Novo Curso");
        buttonCriarNovoCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCriarNovoCursoActionPerformed(evt);
            }
        });

        jTextField1.setText("Procurar por ID");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addComponent(buttonAtualizarCurso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDeletarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCriarNovoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115)
                        .addComponent(buttonCriarNovoCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAtualizarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonDeletarCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAtualizarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAtualizarCursoActionPerformed
        // TODO add your handling code here:
        
        int linhaSelecionada = jTable1.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um curso para atualizar.");
            return;
        }

        // Pega o ID da linha selecionada (assumindo que está na primeira coluna)
        Long idCurso = (Long) jTable1.getValueAt(linhaSelecionada, 0);

        try {
           
            //Buscando pelo curso!
            Curso curso = cursoController.findById(idCurso);

            if (curso == null) {
                JOptionPane.showMessageDialog(this, "Curso não encontrado no banco.");
                return;
            }

            // Cria campos preenchidos com os dados atuais
            JTextField campoNome = new JTextField(curso.getNome());
            JTextField campoCodigo = new JTextField(curso.getCodigoCurso());
            JCheckBox checkAtivo = new JCheckBox("Curso Ativo", curso.isAtivo());

            Object[] campos = {
                "Nome:", campoNome,
                "Código do Curso:", campoCodigo,
                checkAtivo
            };

            int opcao = JOptionPane.showConfirmDialog(
                null,
                campos,
                "Atualizar Curso",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
            );

            if (opcao == JOptionPane.OK_OPTION) {
                // Perciste no banco usando o DAO
                curso.setNome(campoNome.getText());
                curso.setCodigoCurso(campoCodigo.getText());
                curso.setAtivo(checkAtivo.isSelected());
                
                cursoController.update(curso); // <-- ESSENCIAL

                JOptionPane.showMessageDialog(this, "Curso atualizado com sucesso!");
                carregarTabela();
            }

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonAtualizarCursoActionPerformed

    private void buttonDeletarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeletarCursoActionPerformed
        // TODO add your handling code here:

        int linhaSelecionada = jTable1.getSelectedRow();

          if (linhaSelecionada == -1) {
              JOptionPane.showMessageDialog(this, "Selecione um curso para deletar.");
              return;
          }

          // Pega o ID do curso na primeira coluna (ajuste se for outra coluna)
          Long idCurso = null;
          Object valorId = jTable1.getValueAt(linhaSelecionada, 0);
          if (valorId instanceof Long) {
              idCurso = (Long) valorId;
          } else if (valorId instanceof Integer) {
              // Caso venha como Integer do banco, converte para Long
              idCurso = ((Integer) valorId).longValue();
          } else {
              JOptionPane.showMessageDialog(this, "ID do curso inválido.");
              return;
          }

          int confirm = JOptionPane.showConfirmDialog(this,
              "Tem certeza que deseja excluir o curso selecionado?",
              "Confirmar exclusão",
              JOptionPane.YES_NO_OPTION);

          if (confirm != JOptionPane.YES_OPTION) {
              return; // Cancelou exclusão
          }

          try {
              
             
              Curso curso = cursoController.findById(idCurso);
              
              if (curso == null) {
                  JOptionPane.showMessageDialog(this, "Curso não encontrado no banco.");
                  return;
              }
              // Detleta usando as camadas
              cursoController.delete(curso);

              JOptionPane.showMessageDialog(this, "Curso excluído com sucesso!");
              carregarTabela();

          } catch (HeadlessException e) {
              JOptionPane.showMessageDialog(this, "Erro ao excluir curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
          }

    }//GEN-LAST:event_buttonDeletarCursoActionPerformed

    private void buttonCriarNovoCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCriarNovoCursoActionPerformed
        // TODO add your handling code here:
        
        
        JTextField campoNome = new JTextField();
        JTextField campoCodigo = new JTextField();
        JCheckBox checkAtivo = new JCheckBox("Curso Ativo", true); // Marcado como padrão

        Object[] campos = {
            "Nome:", campoNome,
            "Código do Curso:", campoCodigo,
            checkAtivo
        };

        int opcao = JOptionPane.showConfirmDialog(
            null,
            campos,
            "Adicionar Novo Curso",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (opcao == JOptionPane.OK_OPTION) {
            String nome = campoNome.getText();
            String codigo = campoCodigo.getText();
            boolean ativo = checkAtivo.isSelected(); // Pega o valor do checkbox

            try {
                Curso curso = new Curso();
                curso.setNome(nome);
                curso.setCodigoCurso(codigo);
                curso.setAtivo(ativo); // Define com base no checkbox
                
                // Salva usando as camadas
               
                cursoController.save(curso);
                

                JOptionPane.showMessageDialog(null, "Curso salvo com sucesso!");
                carregarTabela();

            } catch (HeadlessException e) {
                JOptionPane.showMessageDialog(null, "Erro ao salvar curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_buttonCriarNovoCursoActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        
         String textoBusca = jTextField1.getText().trim();

        if (textoBusca.isEmpty()) {
            // Se o campo estiver vazio, carrega toda a tabela normalmente
            carregarTabela();
            return;
        }

        Long idBusca = null;
        try {
            idBusca = Long.valueOf(textoBusca);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, digite um ID válido (número).");
            return;
        }

        try { 
            // Realizando busca pelas camadas
            Curso curso = cursoController.findById(idBusca);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // limpa a tabela

            // verifica de o objeto é null
            if (curso != null) {
                Object[] linha = {
                    curso.getId(),
                    curso.getNome(),
                    curso.getCodigoCurso(),
                    curso.isAtivo()
                };
                model.addRow(linha);
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum curso encontrado com o ID informado.");
                carregarTabela(); // opcional: volta a mostrar todos os cursos
            }

        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar curso: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CursoListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new CursoListar().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton buttonAtualizarCurso;
    private javax.swing.JToggleButton buttonCriarNovoCurso;
    private javax.swing.JToggleButton buttonDeletarCurso;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
